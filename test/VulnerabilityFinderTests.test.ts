import {describe, expect, test} from '@jest/globals';
import ScrapperRedis from "../src/Scrapper/ScrapperRedis";
import Scrapper from "../src/Scrapper/Scrapper";
import {mockLinks, NUM_OF_LINKS_TO_CHOOSE} from "../src/consts";
import {afterEach} from "node:test";
beforeAll( () => {
    ScrapperRedis.init();
})
describe('Scrapper tests', () => {
    test('checking that we can add a link',async () => {
        const didAdd = await ScrapperRedis.addUnique('url');
        const doesExist = await ScrapperRedis.isDuplicate('url')
        expect(didAdd).toBe(true)
        expect(doesExist).toBe(true)

    })
    test('removing link',async  () => {
        const didRemoveLink = await ScrapperRedis.removeLink('url');
        expect(didRemoveLink).toBe(true)
    })
    test('link was removed',async  () => {
        const doesLinkExist = await ScrapperRedis.isDuplicate('url')
        expect(doesLinkExist).toBe(false)
    })
    test('adding mock links', async () => {
        const numOfAddedLinks = await Scrapper.parseURL('random.org')
        // note - because the link choosing is random, I am asking for it to get at least the number of link I have chosen at the start
        // Although we will usually find all 10 links(+1 for the initial link, unless it is one of the ones in the mock file)
        expect(numOfAddedLinks).toBeGreaterThan(NUM_OF_LINKS_TO_CHOOSE);
        await ScrapperRedis.clearLinks()
    })
    describe('Checking the parse url function', () => {
        afterEach(async () => {
            // Because we are running the parser, we want to clear the mock redis every function.
            await ScrapperRedis.clearLinks()
        })
        test('adding mock links with initial link from the mock list', async () => {
            const numOfAddedLinks = await Scrapper.parseURL(mockLinks[0])
            // Like the function above, but this time I am checking that I found at least one less than before
            // (as the first link can be chosen later, but it is already been counted)
            expect(numOfAddedLinks).toBeGreaterThan(NUM_OF_LINKS_TO_CHOOSE -1);

        })
        test('Checking that mock list links were added', async () => {
            const didAdd: boolean = await Scrapper.doesLinkExist(mockLinks[0])
            expect(didAdd).toBe(true);
        })
        test('no url given, expecting an error', async () => {
            await expect(Scrapper.parseURL(null)).rejects.toThrow()
        })
    })

})